
# 1 "main.c"

# 4 "C:\Code\Microchip\xc8\v1.45\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Code\Microchip\xc8\v1.45\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Code\Microchip\xc8\v1.45\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Code\Microchip\xc8\v1.45\include\errno.h"
extern int errno;

# 12 "C:\Code\Microchip\xc8\v1.45\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Code\Microchip\xc8\v1.45\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 7 "C:\Code\Microchip\xc8\v1.45\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Code\Microchip\xc8\v1.45\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Code\Microchip\xc8\v1.45\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 26 "C:\Code\Microchip\xc8\v1.45\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);

# 9 "C:\Code\Microchip\xc8\v1.45\include\pic.h"
extern unsigned char __osccal_val(void);

# 50 "C:\Code\Microchip\xc8\v1.45\include\pic12f629.h"
extern volatile unsigned char INDF @ 0x000;

asm("INDF equ 00h");


typedef union {
struct {
unsigned INDF :8;
};
} INDFbits_t;
extern volatile INDFbits_t INDFbits @ 0x000;

# 70
extern volatile unsigned char TMR0 @ 0x001;

asm("TMR0 equ 01h");


typedef union {
struct {
unsigned TMR0 :8;
};
} TMR0bits_t;
extern volatile TMR0bits_t TMR0bits @ 0x001;

# 90
extern volatile unsigned char PCL @ 0x002;

asm("PCL equ 02h");


typedef union {
struct {
unsigned PCL :8;
};
} PCLbits_t;
extern volatile PCLbits_t PCLbits @ 0x002;

# 110
extern volatile unsigned char STATUS @ 0x003;

asm("STATUS equ 03h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned RP :2;
unsigned IRP :1;
};
struct {
unsigned :5;
unsigned RP0 :1;
unsigned RP1 :1;
};
struct {
unsigned CARRY :1;
unsigned :1;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0x003;

# 196
extern volatile unsigned char FSR @ 0x004;

asm("FSR equ 04h");


typedef union {
struct {
unsigned FSR :8;
};
} FSRbits_t;
extern volatile FSRbits_t FSRbits @ 0x004;

# 216
extern volatile unsigned char GPIO @ 0x005;

asm("GPIO equ 05h");


typedef union {
struct {
unsigned GP0 :1;
unsigned GP1 :1;
unsigned GP2 :1;
unsigned GP3 :1;
unsigned GP4 :1;
unsigned GP5 :1;
};
struct {
unsigned GPIO0 :1;
unsigned GPIO1 :1;
unsigned GPIO2 :1;
unsigned GPIO3 :1;
unsigned GPIO4 :1;
unsigned GPIO5 :1;
};
} GPIObits_t;
extern volatile GPIObits_t GPIObits @ 0x005;

# 304
extern volatile unsigned char PCLATH @ 0x00A;

asm("PCLATH equ 0Ah");


typedef union {
struct {
unsigned PCLATH :5;
};
} PCLATHbits_t;
extern volatile PCLATHbits_t PCLATHbits @ 0x00A;

# 324
extern volatile unsigned char INTCON @ 0x00B;

asm("INTCON equ 0Bh");


typedef union {
struct {
unsigned GPIF :1;
unsigned INTF :1;
unsigned T0IF :1;
unsigned GPIE :1;
unsigned INTE :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :2;
unsigned TMR0IF :1;
unsigned :2;
unsigned TMR0IE :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0x00B;

# 402
extern volatile unsigned char PIR1 @ 0x00C;

asm("PIR1 equ 0Ch");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned :2;
unsigned CMIF :1;
unsigned :2;
unsigned ADIF :1;
unsigned EEIF :1;
};
struct {
unsigned T1IF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0x00C;

# 450
extern volatile unsigned short TMR1 @ 0x00E;

asm("TMR1 equ 0Eh");




extern volatile unsigned char TMR1L @ 0x00E;

asm("TMR1L equ 0Eh");


typedef union {
struct {
unsigned TMR1L :8;
};
} TMR1Lbits_t;
extern volatile TMR1Lbits_t TMR1Lbits @ 0x00E;

# 477
extern volatile unsigned char TMR1H @ 0x00F;

asm("TMR1H equ 0Fh");


typedef union {
struct {
unsigned TMR1H :8;
};
} TMR1Hbits_t;
extern volatile TMR1Hbits_t TMR1Hbits @ 0x00F;

# 497
extern volatile unsigned char T1CON @ 0x010;

asm("T1CON equ 010h");


typedef union {
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
unsigned TMR1GE :1;
};
struct {
unsigned :4;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0x010;

# 562
extern volatile unsigned char CMCON @ 0x019;

asm("CMCON equ 019h");


typedef union {
struct {
unsigned CM :3;
unsigned CIS :1;
unsigned CINV :1;
unsigned :1;
unsigned COUT :1;
};
struct {
unsigned CM0 :1;
unsigned CM1 :1;
unsigned CM2 :1;
};
} CMCONbits_t;
extern volatile CMCONbits_t CMCONbits @ 0x019;

# 621
extern volatile unsigned char OPTION_REG @ 0x081;

asm("OPTION_REG equ 081h");


typedef union {
struct {
unsigned PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned INTEDG :1;
unsigned nGPPU :1;
};
struct {
unsigned PS0 :1;
unsigned PS1 :1;
unsigned PS2 :1;
};
} OPTION_REGbits_t;
extern volatile OPTION_REGbits_t OPTION_REGbits @ 0x081;

# 691
extern volatile unsigned char TRISIO @ 0x085;

asm("TRISIO equ 085h");


typedef union {
struct {
unsigned TRISIO0 :1;
unsigned TRISIO1 :1;
unsigned TRISIO2 :1;
unsigned TRISIO3 :1;
unsigned TRISIO4 :1;
unsigned TRISIO5 :1;
};
} TRISIObits_t;
extern volatile TRISIObits_t TRISIObits @ 0x085;

# 741
extern volatile unsigned char PIE1 @ 0x08C;

asm("PIE1 equ 08Ch");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned :2;
unsigned CMIE :1;
unsigned :2;
unsigned ADIE :1;
unsigned EEIE :1;
};
struct {
unsigned T1IE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0x08C;

# 789
extern volatile unsigned char PCON @ 0x08E;

asm("PCON equ 08Eh");


typedef union {
struct {
unsigned nBOR :1;
unsigned nPOR :1;
};
struct {
unsigned nBOD :1;
};
} PCONbits_t;
extern volatile PCONbits_t PCONbits @ 0x08E;

# 823
extern volatile unsigned char OSCCAL @ 0x090;

asm("OSCCAL equ 090h");


typedef union {
struct {
unsigned :2;
unsigned CAL :6;
};
struct {
unsigned :2;
unsigned CAL0 :1;
unsigned CAL1 :1;
unsigned CAL2 :1;
unsigned CAL3 :1;
unsigned CAL4 :1;
unsigned CAL5 :1;
};
} OSCCALbits_t;
extern volatile OSCCALbits_t OSCCALbits @ 0x090;

# 883
extern volatile unsigned char WPU @ 0x095;

asm("WPU equ 095h");


typedef union {
struct {
unsigned WPU0 :1;
unsigned WPU1 :1;
unsigned WPU2 :1;
unsigned :1;
unsigned WPU4 :1;
unsigned WPU5 :1;
};
} WPUbits_t;
extern volatile WPUbits_t WPUbits @ 0x095;

# 928
extern volatile unsigned char IOC @ 0x096;

asm("IOC equ 096h");


extern volatile unsigned char IOCB @ 0x096;

asm("IOCB equ 096h");


typedef union {
struct {
unsigned IOC0 :1;
unsigned IOC1 :1;
unsigned IOC2 :1;
unsigned IOC3 :1;
unsigned IOC4 :1;
unsigned IOC5 :1;
};
struct {
unsigned IOCB0 :1;
unsigned IOCB1 :1;
unsigned IOCB2 :1;
unsigned IOCB3 :1;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
};
} IOCbits_t;
extern volatile IOCbits_t IOCbits @ 0x096;

# 1019
typedef union {
struct {
unsigned IOC0 :1;
unsigned IOC1 :1;
unsigned IOC2 :1;
unsigned IOC3 :1;
unsigned IOC4 :1;
unsigned IOC5 :1;
};
struct {
unsigned IOCB0 :1;
unsigned IOCB1 :1;
unsigned IOCB2 :1;
unsigned IOCB3 :1;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
};
} IOCBbits_t;
extern volatile IOCBbits_t IOCBbits @ 0x096;

# 1102
extern volatile unsigned char VRCON @ 0x099;

asm("VRCON equ 099h");


typedef union {
struct {
unsigned VR :4;
unsigned :1;
unsigned VRR :1;
unsigned :1;
unsigned VREN :1;
};
struct {
unsigned VR0 :1;
unsigned VR1 :1;
unsigned VR2 :1;
unsigned VR3 :1;
};
} VRCONbits_t;
extern volatile VRCONbits_t VRCONbits @ 0x099;

# 1162
extern volatile unsigned char EEDATA @ 0x09A;

asm("EEDATA equ 09Ah");


extern volatile unsigned char EEDAT @ 0x09A;

asm("EEDAT equ 09Ah");


typedef union {
struct {
unsigned EEDATA :8;
};
} EEDATAbits_t;
extern volatile EEDATAbits_t EEDATAbits @ 0x09A;

# 1185
typedef union {
struct {
unsigned EEDATA :8;
};
} EEDATbits_t;
extern volatile EEDATbits_t EEDATbits @ 0x09A;

# 1200
extern volatile unsigned char EEADR @ 0x09B;

asm("EEADR equ 09Bh");


typedef union {
struct {
unsigned EEADR :7;
};
} EEADRbits_t;
extern volatile EEADRbits_t EEADRbits @ 0x09B;

# 1220
extern volatile unsigned char EECON1 @ 0x09C;

asm("EECON1 equ 09Ch");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0x09C;

# 1258
extern volatile unsigned char EECON2 @ 0x09D;

asm("EECON2 equ 09Dh");


typedef union {
struct {
unsigned EECON2 :8;
};
} EECON2bits_t;
extern volatile EECON2bits_t EECON2bits @ 0x09D;

# 1283
extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit CAL0 @ (((unsigned) &OSCCAL)*8) + 2;

extern volatile __bit CAL1 @ (((unsigned) &OSCCAL)*8) + 3;

extern volatile __bit CAL2 @ (((unsigned) &OSCCAL)*8) + 4;

extern volatile __bit CAL3 @ (((unsigned) &OSCCAL)*8) + 5;

extern volatile __bit CAL4 @ (((unsigned) &OSCCAL)*8) + 6;

extern volatile __bit CAL5 @ (((unsigned) &OSCCAL)*8) + 7;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CINV @ (((unsigned) &CMCON)*8) + 4;

extern volatile __bit CIS @ (((unsigned) &CMCON)*8) + 3;

extern volatile __bit CM0 @ (((unsigned) &CMCON)*8) + 0;

extern volatile __bit CM1 @ (((unsigned) &CMCON)*8) + 1;

extern volatile __bit CM2 @ (((unsigned) &CMCON)*8) + 2;

extern volatile __bit CMIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit CMIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit COUT @ (((unsigned) &CMCON)*8) + 6;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit EEIE @ (((unsigned) &PIE1)*8) + 7;

extern volatile __bit EEIF @ (((unsigned) &PIR1)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GP0 @ (((unsigned) &GPIO)*8) + 0;

extern volatile __bit GP1 @ (((unsigned) &GPIO)*8) + 1;

extern volatile __bit GP2 @ (((unsigned) &GPIO)*8) + 2;

extern volatile __bit GP3 @ (((unsigned) &GPIO)*8) + 3;

extern volatile __bit GP4 @ (((unsigned) &GPIO)*8) + 4;

extern volatile __bit GP5 @ (((unsigned) &GPIO)*8) + 5;

extern volatile __bit GPIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit GPIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit GPIO0 @ (((unsigned) &GPIO)*8) + 0;

extern volatile __bit GPIO1 @ (((unsigned) &GPIO)*8) + 1;

extern volatile __bit GPIO2 @ (((unsigned) &GPIO)*8) + 2;

extern volatile __bit GPIO3 @ (((unsigned) &GPIO)*8) + 3;

extern volatile __bit GPIO4 @ (((unsigned) &GPIO)*8) + 4;

extern volatile __bit GPIO5 @ (((unsigned) &GPIO)*8) + 5;

extern volatile __bit INTE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INTEDG @ (((unsigned) &OPTION_REG)*8) + 6;

extern volatile __bit INTF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit IOC0 @ (((unsigned) &IOC)*8) + 0;

extern volatile __bit IOC1 @ (((unsigned) &IOC)*8) + 1;

extern volatile __bit IOC2 @ (((unsigned) &IOC)*8) + 2;

extern volatile __bit IOC3 @ (((unsigned) &IOC)*8) + 3;

extern volatile __bit IOC4 @ (((unsigned) &IOC)*8) + 4;

extern volatile __bit IOC5 @ (((unsigned) &IOC)*8) + 5;

extern volatile __bit IOCB0 @ (((unsigned) &IOC)*8) + 0;

extern volatile __bit IOCB1 @ (((unsigned) &IOC)*8) + 1;

extern volatile __bit IOCB2 @ (((unsigned) &IOC)*8) + 2;

extern volatile __bit IOCB3 @ (((unsigned) &IOC)*8) + 3;

extern volatile __bit IOCB4 @ (((unsigned) &IOC)*8) + 4;

extern volatile __bit IOCB5 @ (((unsigned) &IOC)*8) + 5;

extern volatile __bit IRP @ (((unsigned) &STATUS)*8) + 7;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PS0 @ (((unsigned) &OPTION_REG)*8) + 0;

extern volatile __bit PS1 @ (((unsigned) &OPTION_REG)*8) + 1;

extern volatile __bit PS2 @ (((unsigned) &OPTION_REG)*8) + 2;

extern volatile __bit PSA @ (((unsigned) &OPTION_REG)*8) + 3;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RP0 @ (((unsigned) &STATUS)*8) + 5;

extern volatile __bit RP1 @ (((unsigned) &STATUS)*8) + 6;

extern volatile __bit T0CS @ (((unsigned) &OPTION_REG)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &OPTION_REG)*8) + 4;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit T1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1GE @ (((unsigned) &T1CON)*8) + 6;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TRISIO0 @ (((unsigned) &TRISIO)*8) + 0;

extern volatile __bit TRISIO1 @ (((unsigned) &TRISIO)*8) + 1;

extern volatile __bit TRISIO2 @ (((unsigned) &TRISIO)*8) + 2;

extern volatile __bit TRISIO3 @ (((unsigned) &TRISIO)*8) + 3;

extern volatile __bit TRISIO4 @ (((unsigned) &TRISIO)*8) + 4;

extern volatile __bit TRISIO5 @ (((unsigned) &TRISIO)*8) + 5;

extern volatile __bit VR0 @ (((unsigned) &VRCON)*8) + 0;

extern volatile __bit VR1 @ (((unsigned) &VRCON)*8) + 1;

extern volatile __bit VR2 @ (((unsigned) &VRCON)*8) + 2;

extern volatile __bit VR3 @ (((unsigned) &VRCON)*8) + 3;

extern volatile __bit VREN @ (((unsigned) &VRCON)*8) + 7;

extern volatile __bit VRR @ (((unsigned) &VRCON)*8) + 5;

extern volatile __bit WPU0 @ (((unsigned) &WPU)*8) + 0;

extern volatile __bit WPU1 @ (((unsigned) &WPU)*8) + 1;

extern volatile __bit WPU2 @ (((unsigned) &WPU)*8) + 2;

extern volatile __bit WPU4 @ (((unsigned) &WPU)*8) + 4;

extern volatile __bit WPU5 @ (((unsigned) &WPU)*8) + 5;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nBOD @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nBOR @ (((unsigned) &PCON)*8) + 0;

extern volatile __bit nGPPU @ (((unsigned) &OPTION_REG)*8) + 7;

extern volatile __bit nPD @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit nPOR @ (((unsigned) &PCON)*8) + 1;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &STATUS)*8) + 4;


# 28 "C:\Code\Microchip\xc8\v1.45\include\pic.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 78
extern unsigned int flash_read(unsigned short addr);

# 142
extern void flash_erase(unsigned short addr);

# 114 "C:\Code\Microchip\xc8\v1.45\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, __eeprom unsigned char *from, unsigned char size);
extern void memcpyee(__eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 152 "C:\Code\Microchip\xc8\v1.45\include\pic.h"
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);
#pragma intrinsic(_delaywdt)
extern __nonreentrant void _delaywdt(unsigned long);

# 193
extern __bank0 unsigned char __resetbits;
extern __bank0 __bit __powerdown;
extern __bank0 __bit __timeout;


# 18 "main.c"
#pragma config BOREN = OFF, MCLRE = OFF, PWRTE = ON, WDTE = OFF, FOSC = INTRCIO

# 34
unsigned int cntA = 0;
unsigned int cntB = 0;
unsigned char trigger = 0;
unsigned char eepromData = 0;
signed char buttonA = 0;
signed char buttonB = 0;
unsigned int speed[] = {200, 300, 400, 500, 600, 800, 1000, 1200, 1500, 2000};
unsigned int autoA = 2000;
unsigned int autoB = 2000;
unsigned char oldButtonA = 255;
unsigned char oldButtonB = 255;
unsigned char outA = 0;
unsigned char outB = 0;

# 56
void main(void) {


CMCON = 0x07;
TRISIO = 0x0F;
GPIO = 0x00;


eepromData = eeprom_read(0x01);
if (eepromData > 9) eepromData = 5;
buttonA = eepromData;
oldButtonA = buttonA;

eepromData = eeprom_read(0x03);
if (eepromData > 9) eepromData = 5;
buttonB = eepromData;
oldButtonB = buttonB;

# 82
while (1) {


if ((GP2 == 0) && (GP3 == 0)) {

buttonA = 5;
buttonB = 5;

} else if (GP2 == 0) {

trigger = 1;

if (GP0 == 0) {
cntA ++;
if (cntA > 2000) {
cntA = 0;
buttonA ++;
if (buttonA > 9) buttonA = 9;
}
}

if (GP1 == 0) {
cntB ++;
if (cntB > 2000) {
cntB = 0;
buttonB ++;
if (buttonB > 9) buttonB = 9;
}
}

} else if (GP3 == 0) {

trigger = 2;

if (GP0 == 0) {
cntA ++;
if (cntA > 2000) {
cntA = 0;
buttonA --;
if (buttonA < 0) buttonA = 0;
}
}

if (GP1 == 0) {
cntB ++;
if (cntB > 2000) {
cntB = 0;
buttonB --;
if (buttonB < 0) buttonB = 0;
}
}

} else {


if (trigger == 1) {

if (cntA > 500) {
buttonA ++;
if (buttonA > 9) buttonA = 9;
}

if (cntB > 500) {
buttonB ++;
if (buttonB > 9) buttonB = 9;
}

} else if (trigger == 2) {

if (cntA > 500) {
buttonA --;
if (buttonA < 0) buttonA = 0;
}

if (cntB > 500) {
buttonB --;
if (buttonB < 0) buttonB = 0;
}

}


cntA = 0;
cntB = 0;
trigger = 0;

}

# 174
if (GP0 == 0) {
autoA ++;
if (autoA > speed[buttonA]) {
outA = 1;
if (autoA > (speed[buttonA] + 200)) {
autoA = 0;
}
} else {
outA = 0;
}
} else {
autoA = speed[9];
outA = 0;
}


if (GP1 == 0) {
autoB ++;
if (autoB > speed[buttonB]) {
outB = 1;
if (autoB > (speed[buttonB] + 200)) {
autoB = 0;
}
} else {
outB = 0;
}
} else {
autoB = speed[9];
outB = 0;
}




if (GP2 == 1 && GP3 == 1) {
if (buttonA != oldButtonA) {
oldButtonA = buttonA;
eeprom_write(0x01, buttonA);
}
if (buttonB != oldButtonB) {
oldButtonB = buttonB;
eeprom_write(0x03, buttonB);
}
}



GPIO = (outB << 5) | (outA << 4);

}

}
